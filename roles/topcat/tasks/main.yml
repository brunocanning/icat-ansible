---

- name: 'Install jq package'
  package:
    name: jq
    state: present

- name: 'Check topcat package'
  stat:
    path: /home/{{ payara_user }}/downloads/topcat-{{ topcat_version }}-distro.zip
  register: packageResult

- name: 'Download topcat'
  get_url:
    url: https://repo.icatproject.org/repo/org/icatproject/topcat/{{ topcat_version }}/topcat-{{ topcat_version }}-distro.zip
    dest: /home/{{ payara_user }}/downloads
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    mode: 0664
  when: packageResult.stat.exists is defined and packageResult.stat.exists == false

- name: 'Unarchive topcat if not installed'
  unarchive:
    src: /home/{{ payara_user }}/downloads/topcat-{{ topcat_version }}-distro.zip
    dest: /home/{{ payara_user }}/install
    remote_src: true
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
  when: ansible_local.local.instantiations.topcat is not defined or ansible_local.local.versions.topcat != topcat_version

- name: "Find any war files not matching the current version"
  find:
    paths: /home/{{ payara_user }}/install/topcat/
    use_regex: yes
    patterns: "^.*-(?!{{ topcat_version }}).*\\.war$"
  register: warFilesResult

- name: "Remove war files not matching the current version"
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ warFilesResult.files }}"

- name: 'Create database for topcat'
  mysql_db:
    name: '{{ topcat_database }}'
    login_user: '{{ db_root_username }}'
    login_password: '{{ db_root_password }}'

- name: 'Create user for topcat database'
  mysql_user:
    name: '{{ db_topcat_username }}'
    password: '{{ db_topcat_password }}'
    priv: '{{ topcat_database }}.*:ALL,GRANT'
    login_user: '{{ db_root_username }}'
    login_password: '{{ db_root_password }}'

- name: 'Create a stash directory for assembling configurations'
  file:
    path: /home/{{ payara_user }}/stash
    state: directory
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    mode: 0775

- name: 'Create a stash directory for topcat configs'
  file:
    path: /home/{{ payara_user }}/stash/topcat
    state: directory
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    mode: 0775

- name: 'Copy over {{ payara_user }} setup.properties'
  template:
    src: roles/payara/templates/setup.properties.j2
    dest: /home/{{ payara_user }}/stash/topcat/1-part
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    mode: 0664

- name: 'Copy over topcat-setup.properties'
  template:
    src: templates/topcat-setup.properties.j2
    dest: /home/{{ payara_user }}/stash/topcat/2-part
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    mode: 0664

- name: 'Configure topcat-setup.properties by concatenation of files in the stash'
  assemble:
    src: /home/{{ payara_user }}/stash/topcat
    dest: /home/{{ payara_user }}/install/topcat/topcat-setup.properties
    delimiter: '\n'
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    mode: 0600
  notify:
  - "topcat-handler"

- name: 'Configure topcat.properties'
  template:
    src: templates/topcat.properties.j2
    dest: /home/{{ payara_user }}/install/topcat/topcat.properties
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    mode: 0600
  notify:
  - "topcat-handler"

- name: 'Check topcat.json'
  stat:
    path: /home/{{ payara_user }}/install/topcat/topcat.json
  register: topcatJsonResult

- name: 'Create topcat.json'
  import_tasks: tasks/create-topcat-json.yml
  when: topcatJsonResult.stat.exists is defined and topcatJsonResult.stat.exists == false
  notify:
  - "topcat-handler"

- name: 'Configure lang.json'
  copy:
    src: /home/{{ payara_user }}/install/topcat/lang.json.example
    dest: /home/{{ payara_user }}/install/topcat/lang.json
    remote_src: true
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    mode: 0664
  notify:
  - "topcat-handler"

- name: 'Configure topcat.css'
  copy:
    src: /home/{{ payara_user }}/install/topcat/topcat.css.example
    dest: /home/{{ payara_user }}/install/topcat/topcat.css
    remote_src: true
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    mode: 0664
  notify:
  - "topcat-handler"

- name: 'Check content directory'
  stat:
    path: /home/{{ payara_user }}/install/topcat/content
  register: contentResult

- name: 'Configure content directory'
  shell: 'su -l {{ payara_user }} -c "cd /home/{{ payara_user }}/install/topcat; cp -r content.example content"'
  become: true
  become_user: root
  args:
    executable: /bin/bash
  when: contentResult.stat.exists is defined and contentResult.stat.exists == false
  notify:
  - "topcat-handler"

- name: 'Configure topcat logback.xml'
  copy:
    src: files/logback.xml
    dest: /home/{{ payara_user }}/install/topcat/logback.xml
    owner: '{{ payara_user }}'
    group: '{{ payara_user }}'
    mode: 0664
  notify:
  - "topcat-handler"

- name: 'Setup topcat if not setup'
  import_tasks: tasks/installation.yml
  when: (ansible_local is not defined) or (ansible_local.local is not defined) or (ansible_local.local.instantiations is not defined) or (ansible_local.local.instantiations.topcat is not defined) or (ansible_local.local.instantiations.topcat != 'true')
